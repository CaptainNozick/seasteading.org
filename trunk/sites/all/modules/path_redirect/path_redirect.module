<?php
//$Id: path_redirect.module,v 1.3.2.18 2007/12/27 05:51:12 horsepunchkid Exp $

/**
 * Implementation of hook_help
 *
 */
function path_redirect_help($section) {
  switch ($section) {
    case 'admin/build/path_redirect':
      return t("<p>Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL. </p>");
    case 'admin/build/path_redirect/'. arg(2):
    case 'admin/build/path_redirect/edit/'. arg(3):
      return t("<p>The <strong>from</strong> path must be an internal Drupal path in the form of 'node/123', 'admin/logs', or 'taxonomy/term/123'. The <strong>to</strong> path can be either an internal Drupal path as above or a complete external URL such as http://www.example.com/. Furthermore, the <strong>to</strong> path may contain query arguments (such as 'page=2') and fragment anchors, to make it possible to redirect to 'admin/user?page=1#help'. Most redirects will not contain queries or anchors.</p>");
  }
}

/**
 * Implementation of hook_init
 *
 * Early checking of URL requested.
 * If a match is found, user is redirected using drupal_goto()
 *
 */
function path_redirect_init() {
  // see if this page has a redirect path
  $query = '';
  if (isset($_SERVER['QUERY_STRING'])) {
    $query = preg_replace('/^q=([^&]*).*$/', '\1', $_SERVER['QUERY_STRING']);
  }
  $r = db_fetch_object(db_query("SELECT redirect, query, fragment, type FROM {path_redirect} WHERE path = '%s' OR path = '%s'", $query, utf8_encode($query)));
  if ($r) {
    if (function_exists('drupal_goto')) {
      // if there's a result found, do the redirect
      unset($_REQUEST['destination']);
      drupal_goto($r->redirect, ($r->query ? $r->query: NULL), ($r->fragment ? $r->fragment : NULL), $r->type);
    }
    else {
      // page caching is turned on so drupal_goto() (common.inc) hasn't been loaded
      path_redirect_goto($r->redirect, ($r->query ? $r->query: NULL), ($r->fragment ? $r->fragment : NULL), $r->type);
    }
  }
}

/**
 * Implementation of hook_menu
 *
 */
function path_redirect_menu($may_cache) {
  $access = user_access('administer redirects');
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/build/path_redirect',
      'title' => t('URL redirects'),
      'access' => $access,
      'callback' => 'path_redirect_admin',
      'description' => t('Redirect users from one URL to another.'),
    );
    $items[] = array(
      'path' => 'admin/build/path_redirect/list',
      'title' => t('List'),
      'access' => $access,
      'weight' => -3,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/build/path_redirect/new',
      'title' => t('Add redirect'),
      'access' => $access,
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'build' && arg(2) == 'path_redirect' && arg(3) == 'edit') {
      $items[] = array(
        'path' => 'admin/build/path_redirect/edit',
        'title' => t('Edit'),
        'access' => $access,
        'callback' => 'path_redirect_admin',
        'type' => MENU_LOCAL_TASK,
        'weight' => 9,
      );
    }

  }
  return $items;
}

/**
 * Implementation of hook_perm
 */
function path_redirect_perm() {
  return array('administer redirects');
}

/**
 * Callback for administration pages
 *
 * @param $rid
 *  redirect id
 * @param $op
 *  operation: delete
 * @return
 *  themed output for page
 */
function path_redirect_admin($rid = FALSE, $op = FALSE) {
  if ($rid) {
    $breadcrumbs = array(l(t('Home'), '/'), l(t('Administer'), 'admin'), l(t('URL redirects'), 'admin/build/path_redirect'));
    if ($rid == 'new') {
      drupal_set_breadcrumb($breadcrumbs);
      return drupal_get_form('path_redirect_edit');
    }
    else {
      $rid = db_escape_string($rid);
      $redirect = path_redirect_load($rid);
      if ($redirect && $op != 'delete') {
        drupal_set_breadcrumb($breadcrumbs);
        return drupal_get_form('path_redirect_edit', $redirect);
      }
      elseif ($redirect && $op == 'delete') {
        return drupal_get_form('path_redirect_delete_confirm', $redirect);
      }
      else {
        drupal_not_found();
      }
    }
  }

  $header = array(
    array('data' => t('From'), 'field' => 'path', 'sort' => 'asc'),
    array('data' => t('To'), 'field' => 'redirect'),
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Operations'), 'colspan' => '3')
  );

  $result = pager_query('SELECT rid, path, redirect, query, fragment, type FROM {path_redirect}'. tablesort_sql($header), 50);
  $count = db_num_rows($result);
  $types = path_redirect_error_list();
  while ($r = db_fetch_object($result)) {
    $path = $r->path;
    $redirect = $r->redirect;
    $query = $r->query ? "?$r->query" : '';
    $fragment = $r->fragment ? "#$r->fragment" : '';
    $rows[] = array(
      $path,
      check_url($redirect . $query . $fragment),
      $types[$r->type]['title'],
      array('data' => l(t('test'), $r->path, array())),
      array('data' => l(t('edit'), 'admin/build/path_redirect/edit/'. $r->rid)),
      array('data' => l(t('delete'), 'admin/build/path_redirect/edit/'. $r->rid .'/delete')),
    );
  }

  if (!$count) {
    $rows[] = array(array('data' => t('No redirects have been defined.'), 'colspan' => '6'));
  }

  $output = theme('table', $header, $rows, array('class' => 'path-redirects'));
  $output .= '<p>'. l(t('Add new redirect'), 'admin/build/path_redirect/new') .'</p>';
  $output .= theme('pager');

  return $output;
}

function path_redirect_edit($edit = array('path' => '', 'redirect' => '', 'query' => '', 'fragment' => '', 'type' => '301', 'rid' => NULL)) {
  $default_type = 301;

  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#description' => t('Enter a Drupal path or path alias to redirect. Query strings <em>?foo=bar</em> and fragment anchors <em>#baz</em> are <strong>not</strong> allowed.'),
    '#maxlength' => 255,
    '#default_value' => $edit['path'],
  );

  $form['redirect'] = array(
    '#type' => 'item',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#title' => t('To'),
    '#description' => '<div style="display:block">'. t('Enter a Drupal path, path alias, or external URL to redirect to. Use %front to redirect to the front page.  Enter (optional) queries after "?" and (optional) anchor after "#". Most redirects will not contain queries or fragment anchors.', array('%front' => '<front>')) .'</div>',
  );

  $form['redirect']['redirect'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 255,
    '#default_value' => $edit['redirect'],
  );

  $form['redirect'][] = array(
    '#value' => '?',
  );

  $form['redirect']['query'] = array(
    '#type' => 'textfield',
    '#size' => 12,
    '#maxlength' => 50,
    '#default_value' => $edit['query'],
  );

  $form['redirect'][] = array(
    '#value' => '#',
  );

  $form['redirect']['fragment'] = array(
    '#type' => 'textfield',
    '#size' => 12,
    '#maxlength' => 50,
    '#default_value' => $edit['fragment'],
  );

  $form[] = array(
    '#value' => "<p> </p>", // little bit of extra space
  );

  $form['type'] = array(
    '#type' => 'fieldset',
    '#title' => t('Redirect Type'),
    '#collapsible' => true,
    '#collapsed' => ($edit['type'] == $default_type),
  );

  foreach (path_redirect_error_list() as $key => $info) {
    $form['type'][]['type'] = array(
      '#type' => 'radio',
      '#title' => $info['title'],
      '#description' => $info['description'],
      '#return_value' => $key,
      '#default_value' => $edit['type'],
    );
  }
  $form['type']['link'] = array(
    '#type' => 'markup',
    '#value' => t('<p>Find more information about http redirect codes <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3">here</a>.</p>'),
  );

  $form['rid'] = array(
    '#type' => 'hidden',
    '#value' => $edit['rid'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $edit['rid'] ? t('Update redirect') : t('Create new redirect'),
  );

  return $form;
}

function path_redirect_edit_validate($form_id, &$form_values) {
  if (trim($form_values['path']) == '') {
    form_set_error('path', t('You must enter a <strong>from</strong> path.'));
  }
  else {
    $path_error = '';

    // The "from" path should not conflict with another redirect
    $result = path_redirect_load(NULL, preg_replace('/[?#].*/', '', $form_values['path']));
    if ($result && (!$form_values['rid'] || ($form_values['rid'] !== $result['rid']))) {
      $path_error .= ' '. t('The <strong>from</strong> path you entered is already redirected. You can <a href="@edit-page">edit this redirect</a> instead.', array('@edit-page' => url('admin/build/path_redirect/edit/'. $result['rid'])));
    }
    // Check that the "from" path is valid and contains no # or ?
    if (strstr($form_values['path'], '#')) {
      $path_error .= ' '. t('You cannot redirect from a fragment anchor.');
    }
    // No query string allowed in "from" (but see #174961)
    if (strstr($form_values['path'], '?')) {
      $path_error .= ' '. t('You cannot currently include a query in your redirect <strong>from</strong> path.');
    }
    // Make sure "from" has the form of a local Drupal path
    if (!valid_url($form_values['path'])) {
      $path_error .= ' '. t('The redirect <strong>from</strong> path does not appear valid. This must be a local Drupal path.');
    }

    if (!empty($path_error)) {
      form_set_error('path', $path_error);
    }
  }

  if (!valid_url($form_values['redirect']) && !valid_url($form_values['redirect'], TRUE) && $form_values['redirect'] != '<front>') {
    form_set_error('redirect', t('The redirect <strong>to</strong> path does not appear valid.'));
  }

  if ($form_values['redirect'] == '<front>') {
    $form_values['redirect'] = variable_get('site_frontpage', 'node');
  }

  // check that there there are no redirect loops
  if ($form_values['path'] === $form_values['redirect']) {
    form_set_error('redirect', t('You are attempting to redirect the page to itself. This will result in an infinite loop.'));
  }

  // Allow spaces in "from" path
  $form_values['path'] = str_replace("+", " ", $form_values['path']);
}

function path_redirect_edit_submit($form_id, &$form_values) {
  path_redirect_save($form_values);
  drupal_set_message(t('Redirect has been saved.'));
  drupal_goto('admin/build/path_redirect');
}

function path_redirect_save($edit) {
  if (!$edit['rid']) {
    $edit['rid'] = db_next_id('{path_redirect}_rid');
  }
  else {
    path_redirect_delete(NULL, NULL, $edit['rid']);
  }
  // remove any other redirects from the same path
  db_query("DELETE FROM {path_redirect} WHERE path = '%s'", $edit['path']);
  if ($edit['path'] != $edit['redirect']) {
    $return = db_query("INSERT INTO {path_redirect} (rid, path, redirect, query, fragment, type) VALUES (%d, '%s', '%s', '%s', '%s', '%s')", $edit['rid'], $edit['path'], $edit['redirect'], $edit['query'], $edit['fragment'], $edit['type']);
  }
  return $return;
}

/**
 * Retrieve the specified URL redirect
 */
function path_redirect_load($rid = NULL, $from = NULL) {
  if (!empty($rid)) {
    $result = db_fetch_array(db_query("SELECT rid, path, redirect, query, fragment, type FROM {path_redirect} WHERE rid = %d", $rid));
  } else if (!empty($from)) {
    $result = db_fetch_array(db_query("SELECT rid, path, redirect, query, fragment, type FROM {path_redirect} WHERE path = '%s'", $from));
  }
  return $result;
}

/**
 * Delete the specified path redirect. This will delete as specifically as
 * possible, in order: by $rid, by ($from, $to), by $from, or by $to.
 * Multiple redirects may be deleted if the $to parameter matches more than
 * one entry.
 *
 * This function is part of an API available for external code to use.
 *
 * @param $from
 *   Source path of redirect to delete.
 * @param $to
 *   Destination path or URL of redirect to delete.
 * @param $rid
 *   Unique ID of redirect to delete.
 * @return
 *   The result of the deletion query.
 */
function path_redirect_delete($from = NULL, $to = NULL, $rid = NULL) {
  if (!empty($rid)) {
    $result =  db_query("DELETE FROM {path_redirect} WHERE rid = %d", $rid);
  }
  else if (!empty($from)) {
    if (!empty($to)) {
      $result =  db_query("DELETE FROM {path_redirect} WHERE path = '%s' AND redirect = '%s'", $from, $to);
    }
    else {
      $result =  db_query("DELETE FROM {path_redirect} WHERE path = '%s'", $from);
    }
  }
  else if (!empty($to)) {
    $result =  db_query("DELETE FROM {path_redirect} WHERE redirect = '%s'", $to);
  }
  return $result;
}

function path_redirect_delete_confirm($redirect) {
  $form['rid'] = array(
    '#type' => 'value',
    '#value' => check_plain($redirect['rid']),
  );
  $redirect = path_redirect_load($redirect['rid']);
  return confirm_form($form, t('Are you sure you want to delete the redirect from %path to %redirect?', array('%path' => $redirect['path'], '%redirect' => $redirect['redirect'])), 'admin/build/path_redirect', NULL, t('Delete it!'), t('Cancel'));
}

function path_redirect_delete_confirm_submit($form_id, $form_values) {
  path_redirect_delete(NULL, NULL, $form_values['rid']);
  drupal_set_message(t('Redirect item has been deleted.'));
  drupal_goto('admin/build/path_redirect');
}

/**
 * This is a copy of drupal_goto() redesigned for use during the bootstrap
 */
function path_redirect_goto($path = '', $query = NULL, $fragment = NULL, $http_response_code = 302) {

  $url = $path;

  // Make the given path or URL absolute
  if (!preg_match('/^[a-z]+:\/\//', $url)) {
    global $base_url;
    $url = $base_url . '/' . $url;
  }

  $url .= (empty($query)    ? '' : '?' . $query);
  $url .= (empty($fragment) ? '' : '#' . $fragment);

  // Remove newlines from the URL to avoid header injection attacks.
  $url = str_replace(array("\n", "\r"), '', $url);

  // Before the redirect, allow modules to react to the end of the page request.
  bootstrap_invoke_all('exit');

  // Even though session_write_close() is registered as a shutdown function, we
  // need all session data written to the database before redirecting.
  session_write_close();

  header('Location: '. $url, TRUE, $http_response_code);

  // The "Location" header sends a REDIRECT status code to the http
  // daemon. In some cases this can go wrong, so we make sure none
  // of the code below the drupal_goto() call gets executed when we redirect.
  exit();
}

/**
 * Return an array of 300-range error codes
 * placed here for clarity
 */
function path_redirect_error_list() {
  $errors = array(
    300 => array('title' => t('300 Multiple Choices'), 'description' => t('The request is ambiguous and needs clarification as to which resource was requested.')),
    301 => array('title' => t('301 Moved Permanently'), 'description' => t('Moved Permanently. The resource has permanently moved elsewhere, the response indicates where it has gone to. <strong>Recommended.</strong>')),
    302 => array('title' => t('302 Found'), 'description' => t('The resource has temporarily moved elsewhere, the response indicates where it is at present. <strong>This is Drupal\'s default redirect type.</strong>')),
    303 => array('title' => t('303 See Other'), 'description' => t('See Other/Redirect. A preferred alternative source should be used at present.')),
    304 => array('title' => t('304 Not Modified'), 'description' => t('The server has identified from the request information that the client\'s copy of the information is up-to-date and the requested information does not need to be sent again.')),
    305 => array('title' => t('305 Use Proxy'), 'description' => t('The request must be sent through the indicated proxy server.')),
    307 => array('title' => t('307 Temporary Redirect'), 'description' => t('The resource has temporarily moved elsewhere, the response indicates where it is at present. Client should still use this URL.')),
  );

  return $errors;
}
